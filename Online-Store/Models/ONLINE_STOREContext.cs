// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Online_Store.Models
{
    public partial class ONLINE_STOREContext : DbContext
    {
        public ONLINE_STOREContext()
        {
        }

        public ONLINE_STOREContext(DbContextOptions<ONLINE_STOREContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AvailableProduct> AvailableProducts { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<CartProduct> CartProducts { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Shop> Shops { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AvailableProduct>(entity =>
            {
                entity.HasKey(e => e.IdAvailableProduct);

                entity.ToTable("Available_Products");

                entity.Property(e => e.IdAvailableProduct).HasColumnName("ID_Available_Product");

                entity.Property(e => e.AvailableAmount).HasColumnName("Available_Amount");

                entity.Property(e => e.IdProduct).HasColumnName("ID_Product");

                entity.Property(e => e.IdShop).HasColumnName("ID_Shop");

                entity.HasOne(d => d.IdProductNavigation)
                    .WithMany(p => p.AvailableProducts)
                    .HasForeignKey(d => d.IdProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Available_Products_Product");

                entity.HasOne(d => d.IdShopNavigation)
                    .WithMany(p => p.AvailableProducts)
                    .HasForeignKey(d => d.IdShop)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Available_Products_Shop");
            });

            modelBuilder.Entity<Cart>(entity =>
            {
                entity.HasKey(e => e.IdCart);

                entity.Property(e => e.IdCart).HasColumnName("ID_Cart");

                entity.Property(e => e.IdUser).HasColumnName("ID_User");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cart_User");
            });

            modelBuilder.Entity<CartProduct>(entity =>
            {
                entity.HasKey(e => e.IdCartProduct);

                entity.ToTable("Cart_Product");

                entity.Property(e => e.IdCartProduct).HasColumnName("ID_Cart_Product");

                entity.Property(e => e.IdCart).HasColumnName("ID_Cart");

                entity.Property(e => e.IdProduct).HasColumnName("ID_Product");

                entity.HasOne(d => d.IdCartNavigation)
                    .WithMany(p => p.CartProducts)
                    .HasForeignKey(d => d.IdCart)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cart_Cart");

                entity.HasOne(d => d.IdProductNavigation)
                    .WithMany(p => p.CartProducts)
                    .HasForeignKey(d => d.IdProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cart_Product_Product_Product");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => e.IdProduct);

                entity.Property(e => e.IdProduct).HasColumnName("ID_Product");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("money");
            });

            modelBuilder.Entity<Shop>(entity =>
            {
                entity.HasKey(e => e.IdShop);

                entity.Property(e => e.IdShop).HasColumnName("ID_Shop");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.IdUser);

                entity.Property(e => e.IdUser).HasColumnName("ID_User");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Surname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}